<?xml version="1.0"?>
<launch>
<!--
  The simulated Husky and all the associated nodes (control, estimation, etc.)
  are wrapped in a robot_namespace using a group tag.  The tf prefix is generated
  using the robot_namespace
-->

 <!--******************************-->
  <!-- Husky in Gazebo -->
  <!--******************************-->
  <arg name="robot_namespace" default="/" />
  <!-- Generate the tf_prefix from the robot_namespace -->
  <arg name="tfpre" default="$(arg robot_namespace)_tf" />
  <!-- Put value on the parameter server in the group's robot_namespace -->
  <param name="tf_prefix" value="$(arg robot_namespace)_tf" />

  <!-- Initial pose - see "rosrun gazebo_ros spawn_model -h" for syntax -->
  <arg name="initX" default="0" />
  <arg name="initY" default="0" />
  <arg name="initYaw" default="0" />
  <arg name="laser_enabled" default="false"/>
  <arg name="ur5_enabled" default="false"/>
  <arg name="kinect_enabled" default="false"/>
  <arg name="slam_laser_enabled" default="true"/>

  <!-- The robot description tells Gazebo how to simulate
       the IMU, GPS and ground truth -->

  <include file="$(find husky_control)/launch/control.launch">
    <arg name="robot_namespace" default="$(arg robot_namespace)"/>
    <arg name="laser_enabled" default="$(arg laser_enabled)"/>
    <arg name="kinect_enabled" default="$(arg kinect_enabled)"/>
    <arg name="slam_laser_enabled" default="$(arg slam_laser_enabled)"/>
  </include>


<group if="$(arg kinect_enabled)">

    <!-- Include poincloud_to_laserscan if simulated Kinect is attached -->
    <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan" output="screen">

        <remap from="cloud_in" to="camera/depth/points"/>
        <remap from="scan" to="camera/scan"/>
        <rosparam>
            target_frame: base_link # Leave empty to output scan in the pointcloud frame
            tolerance: 1.0
            min_height: 0.05
            max_height: 1.0

            angle_min: -0.52 # -30.0*M_PI/180.0
            angle_max: 0.52 # 30.0*M_PI/180.0
            angle_increment: 0.005 # M_PI/360.0
            scan_time: 0.3333
            range_min: 0.45
            range_max: 4.0
            use_inf: true

            # Concurrency level, affects number of pointclouds queued for processing and number of threads used
            # 0 : Detect number of cores
            # 1 : Single threaded
            # 2->inf : Parallelism level
            concurrency_level: 1
        </rosparam>
    </node>

  </group>

  <!-- Or we could just set this as a static offset -->
  <!--<node pkg="tf" type="static_transform_publisher" name="map_odom_broadcaster" args="$(arg initX) $(arg initY) 0 $(arg initYaw) 0 0 /map /$(arg tfpre)/odom 100" />
     -->
  <!-- Twister server for rviz control-->
 <!--node pkg="interactive_marker_twist_server" type="marker_server" name="twist_marker_server" output="screen">
   <param name="link_name" value="$(arg tfpre)/base_link" />
 </node-->

 <!-- Twist mux is a node from Clearpath that mixes control commands from multiple sources -->
  <!--node pkg="twist_mux" type="twist_mux" name="twist_mux">
    <rosparam command="load" file="$(find husky_control)/config/twist_mux.yaml" />
    <remap from="cmd_vel_out" to="husky_velocity_controller/cmd_vel"/>
  </node-->

  <!-- Note we set the "name" of the model in Gazebo using the robot_namespace -->
  <node name="spawn_husky_model" pkg="gazebo_ros" type="spawn_model"
  args="-x $(arg initX) -y $(arg initY) -Y $(arg initYaw) -unpause -urdf -param robot_description -model Husky_$(arg robot_namespace)"/>

</launch>
